/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
apply plugin: 'idea'
apply from: 'version.gradle'
apply from: 'libVersion.gradle'
buildscript {
	repositories {
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath 'com.github.spotbugs:spotbugs-gradle-plugin:3.0.0'
	}
}
subprojects() {
	apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'pmd'
	apply plugin: 'checkstyle'
	apply plugin: "com.github.spotbugs"
	apply plugin: "maven-publish"
	group 'ru.starovoytov.home.toy'
	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'
	version revision.shortV
	javadoc {
		options.encoding = 'UTF-8'
		options.addStringOption 'charset', 'UTF-8'
		options.memberLevel = JavadocMemberLevel.PRIVATE
		options.author = true
		options.addStringOption 'Xwerror', '-quiet'
		options.addStringOption("charset", "UTF-8")
		classpath += sourceSets.test.compileClasspath
		source += sourceSets.test.allJava
	}
	jacoco {
		toolVersion = jacocoVersion
	}
	pmd {
		ignoreFailures = false
		toolVersion = pmdVersion
		rulePriority = 5
		ruleSets = ['category/java/errorprone.xml',
					'category/java/multithreading.xml',
					'category/java/bestpractices.xml',
					'category/java/codestyle.xml',
					'category/java/performance.xml',
					'category/java/design.xml'
		]
	}
	tasks.withType(Checkstyle) {
		reports {
			xml.enabled true
			html.enabled true
		}
	}
	checkstyle {
		toolVersion = checkStyleVersion
		ignoreFailures = false
		configFile = file("${project.rootDir}/codesyle_checks.xml")
	}
	tasks.withType(com.github.spotbugs.SpotBugsTask) {
		reports {
			xml.enabled true
			html.enabled false
		}
	}
	spotbugs {
		toolVersion = spotBugsVersion
		ignoreFailures = false
		effort = "max"
		reportLevel = "low"
	}
	test {
		useJUnitPlatform()
		testLogging {
			events "failed"
		}
	}
	tasks.withType(JavaCompile) {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}
	repositories {
		maven {
			url 'https://repo1.maven.org/maven2'
		}
	}
	dependencies {
		compile 'org.apache.logging.log4j:log4j-core:' + log4jVersion
		compile 'org.apache.logging.log4j:log4j-api:' + log4jVersion
		compile 'com.lmax:disruptor:' + disruptorVersion
		compileOnly 'com.github.spotbugs:spotbugs-annotations:' + spotBugsVersion
		annotationProcessor 'org.checkerframework:checker:' + checkerVersion
		testAnnotationProcessor 'org.checkerframework:checker:' + checkerVersion
		testCompileOnly 'org.junit.jupiter:junit-jupiter-api:' + jUnitVersion
		testCompileOnly 'org.junit.jupiter:junit-jupiter-params:' + jUnitVersion
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + jUnitVersion
	}
	task fullRebuild() {
		group = "build"
		dependsOn(clean)
		dependsOn(check)
		dependsOn(test)
		dependsOn(jar)
		dependsOn(javadoc)
		dependsOn(buildDependents)
	}
	task fullBuild() {
		group = "build"
		dependsOn(check)
		dependsOn(test)
		dependsOn(jar)
		dependsOn(javadoc)
	}
	publishing {
		publications {
			maven(MavenPublication) {
				artifact("build/libs/" + project.name + "-" + version + ".jar") {
					extension "jar"
				}
			}
		}
		repositories {
			maven {
				name "nexus"
				url System.getenv("NEXUS_ADDRESS")
				credentials {
					username System.getenv("NEXUS_LOGIN")
					password System.getenv("NEXUS_PASSWORD")
				}
			}
		}
	}
	task updateVersion() {
		group = "publishing"
		File file = new File(System.getenv("VERSION_FILE"))
		file.delete()
		file.append(version)
		println file.text
	}
	task publishAll() {
		group = "publishing"
		dependsOn(jar)
		dependsOn(publish)
		dependsOn(updateVersion)
	}
}
